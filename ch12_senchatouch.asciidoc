:toc:
:toclevels: 4

[[sencha_touch]]
== Sencha Touch

The Sencha Touch framework is a little brother of Ext JS. They both have the same creator: http://www.sencha.com/[Sencha], and they both are built on the same set of core classes. But Sencha Touch is created for developing mobile web applications, whereas Ext JS is for desktop web applications.(((Sencha Touch framework, vs. Ext JS))) 

Enterprise IT managers need to be aware of another important difference: Ext JS offers free licenses only for open-source projects, but http://www.sencha.com/products/touch/license/[Sencha Touch licenses] are free unless you decide to purchase this framework bundled with developer tools.   

This chapter is structured similarly to <<jquery_mobile>>, which describes jQuery Mobile--minimum theory followed by the code. A fundamental difference, though, is that whereas <<jquery_mobile>> has almost no JavaScript, this chapter has almost no HTML. 

We'll try minimizing repeating the information you can find in http://www.sencha.com/learn/touch[Sencha Touch Learning Center] and extensive product documentation, which has multiple well-written http://docs.sencha.com/touch/2.3.0/#!/guide[Guides] on various topics. This chapter begins with a brief overview of the features of Sencha Touch followed by a code review of yet another version of the Save The Child application. In this chapter, we are going to use Sencha Touch 2.3.1, which is the latest version at the time of this writing. It supports iOS, Android, BlackBerry, and Windows Phone.(((Sencha Touch framework, documentation for))) 

NOTE: If you haven't read <<developing_in_ext_js>> on Ext JS, please do it now. Both of these frameworks are built on the same foundation, and we assume that you are familiar with such concepts as MVC architecture and `xtype`, SASS, and other terms that are explained in that chapter. For the most part, Ext JS and Sencha Touch non-UI classes are compatible, but there are some differences that might prevent you from attaining 100 percent code reuse between these frameworks (for example, see the section <<stores_and_models>>). Future releases of Sencha should come up with some standard solutions to remove the differences in class systems of both frameworks.

=== Introducing Sencha Touch

Let's begin by downloading Sencha Touch from http://www.sencha.com/products/touch/download/[http://www.sencha.com/products/touch/download]. If you want to get a free commercial license, just specify your email address; you'll receive the download link in the email. The Sencha Touch framework comes as a ZIP file, which you can unzip in any directory. Later, you'll copy the framework's code either into your project directory or in the document root of your web server.(((Sencha Touch framework, downloading)))  

WARNING: A commercial license of Sencha Touch doesn't include charts (you need to get either Sencha Complete or Sencha Touch Bundle for chart support). Therefore, we'll use the General Public License (GPL) of Sencha Touch for the open-source Save The Child project, and our users will see the little watermark, "Powered by Sencha Touch GPLv3," as shown in <<FIG13-1>>.(((Sencha Touch framework, chart support in)))((("charts", "support in Sencha Touch"))) 

[[FIG13-1]]
.The GPL license watermark 
image::images/ewdv_1201.png[]

After downloading Sencha Touch, unzip it into the directory _/Library/touch-2.3.1_. The code generation process copies this framework into our application directory.

==== Performing Code Generation and Distribution

If you haven't downloaded and installed the Sencha CMD tool, do it now as described in <<sencha_cmd_tool>>. This time we'll use Sencha CMD to generate a mobile version of Hello World.(((Sencha Touch framework, code generation/distribution))) After opening a terminal or command window, enter the following command, specifying the absolute path to your Ext JS SDK directory and to the output folder, where the generated project should reside:

_sencha -sdk /Library/touch-2.3.1 generate app HelloWorld /Users/yfain11/hellotouch_

After the code generation is complete, you'll see the folder _hello_ with the structure shown in <<FIG13-2>>. It follows the Model-View-Controller (MVC) pattern discussed in <<developing_in_ext_js>>.((("Model-View-Controller (MVC) design pattern", "in Sencha Touch framework")))

[[FIG13-2]]
.A CMD-generated project 
image::images/ewdv_1202.png[image]

To test your newly generated application, make sure that the directory _hellotouch_ is deployed on a web server (simply opening _index.html_ in a web browser won't work). You can either install any web server or just follow the instructions in <<developing_stc_with_ext_js>> in <<developing_in_ext_js>>. In the same chapter, you can find the command to start the Jetty web server embedded in the Sencha CMD tool.(((Sencha Touch framework, testing new application)))  

Here, we are going to use the internal web server that comes with the WebStorm IDE. It runs on port 63342, and if your project's name is _helloworld_, the URL to test it is  http://localhost:63342/helloworld.

NOTE: To debug your code inside WebStorm, choose Run->Edit Configurations, click the plus sign in the upper-left corner, and then in the JavaScript Debug->Remote panel, enter the URL http://localhost:63342, followed by the name of your project (for example, _ssctouch_) and name your new debug configuration. After that, you'll be able to debug your code in your Chrome web browser (it will ask you to install the JetBrains IDE Support extension on the first run).(((WebStorm, debuggin code in))(((debugging, in WebStorm)))

TIP: Mac OS X users can install the small application http://anvilformac.com/[Anvil], which can easily serve static content of any directory as a web server with a URL that ends with _.dev_.

<<FIG13-3>> shows how the generated Hello World application will look in a Chrome browser. It'll consist of two pages controlled by the buttons in the footer toolbar.

[[FIG13-3]]
.Running CMD-generated Hello World 
image::images/ewdv_1203.png[image]

[[microloaders_configurations]]
===== Microloader and Configurations

The main application entry is the JavaScript file _app.js_. But if in Ext JS, this file was directly referenced in _index.html_, Sencha Touch applications generated by the CMD tool use a separate microloader script, which starts with loading the file _app.json_ that contains the names of the resources needed for your application, including _app.js_. (((Sencha Touch framework, microloader and configurations)))The only script included in the generated _index.html_ is this one:

[source, html]
----
<script id="microloader" type="text/javascript" 
       src="touch/microloader/development.js"></script>
----

This script uses one of the scripts located in the _microloader_ folder, which gets the object names to be loaded from the configuration file _app.json_. This file contains a JSON object with various attributes such as `js`, `css`, `resources`, and others. So if your application needs to load the scripts _sencha-touch.js_ and _app.js_, they should be located in the `js` array. <<ex_js_attribute>> illustrates what the `js` attribute of _app.json_ contains after the initial code generation by Sencha CMD.  

[[ex_js_attribute]]
.The +js+ attribute of app.json
====
[source, javascript]
----
"js": [
    {
        "path": "touch/sencha-touch.js",
        "x-bootstrap": true
    },
    {
        "path": "app.js",
        "bundle": true,  
        "update": "delta"
    }
]
----
====

Eventually, if you need to load additional JavaScript code, CSS files, or other resources, add them to the appropriate attribute in the file _app.json_.

Introducing a separate configuration file and additional microloader script might seem like an unnecessary complication, but it's not. On the contrary, it gives you the flexibility of maintaining a clean separation between development, testing, and production environments. You can find three loader scripts in the folder _touch/microloader_: _development.js_, _production.js_, and _testing.js_. Each of them can load a different configuration file. 

TIP: Our sample application includes sample video files. Don't forget to include the _resources/media_ folder in the `resources` section of _app.json_.

If you open the source code of the production loader, you'll see that it uses an application cache to save files locally on the device (see <<application_cache>> in Appendix B for a refresher), so the user can start the application even without having an Internet connection.

The production microloader of Sencha Touch offers a smarter solution for minimizing unnecessary loading of cached JavaScript and CSS files than the HTML5 application cache. The standard HTML5 mechanism  doesn't know which resources have  changed and reloads all cacheable files. CMD-generated production builds for Sencha Touch keep track of changes and create deltas, so the mobile device will download only those resources that have been actually changed. To create a production build, open a terminal or a command window, change to your application directory, and run the following command: 

+sencha app build production+

See the section http://bit.ly/1ocA8Pn["Deploying Your Application"] for more details on Sencha CMD builds. When we start building our Save The Child application, you'll see how to prompt the user that the application code has been updated. Refer to the http://bit.ly/1gp2l2H[online documentation] on using Sencha CMD with Sencha Touch for details.

.Code Distribution and Modularization  
************
The ability of Sencha Touch to monitor modified pieces of code helps with deployment; just change _SomeFile.js_ on the server and it will be automatically downloaded and saved on the user's mobile device. This can have an effect on the application modularization decisions you make.(((Sencha Touch framework, modularization)))(((modularization, in Sencha Touch)))(((modularization, reducing latency with)))(((modularization, goals of)))

Reducing the startup latency and implementing lazy loading of certain parts of the application are the main reasons for modularizing web applications. The other reason for modularization is an ability to redeploy certain portions of the code versus the entire application if the code modifications are limited in scope. 

So, should we load the entire code base from local storage (it's a lot faster than getting the code from remote servers) or still use loaders to bring up the portion of the code (a.k.a. modules) on an as-needed basis? There is no standard answer to this question--every application is different.

If your application is not too large and the mobile device has enough memory, loading the entire code of the application from local storage can lower the need for modularization. For larger applications, consider the http://bit.ly/1k181ef[Workspaces] feature of Sencha CMD, with which you can create some common code to be shared by several scripts.
************

===== The code of Hello World

Similar to Ext JS, the starting point of the Hello World application is the _app.js_ script, which is shown in <<ex_app-js_file_for_STC>>.(((Sencha Touch framework, Hello World example))) 

[[ex_app-js_file_for_STC]]
.The app.js file of the Sencha Touch version of Save The Child
====
[source, javascript]
----
Ext.Loader.setPath({    
    'Ext': 'touch/src',        // <1>
    'HelloWorld': 'app'
});

Ext.application({
    name: 'HelloWorld',

    requires: [
        'Ext.MessageBox'
    ],

    views: [
        'Main'
    ],

    icon: {
        '57': 'resources/icons/Icon.png',
        '72': 'resources/icons/Icon~ipad.png',
        '114': 'resources/icons/Icon@2x.png',
        '144': 'resources/icons/Icon~ipad@2x.png'
    },

    isIconPrecomposed: true,

    startupImage: {
        '320x460': 'resources/startup/320x460.jpg',
        '640x920': 'resources/startup/640x920.png',
        '768x1004': 'resources/startup/768x1004.png',
        '748x1024': 'resources/startup/748x1024.png',
        '1536x2008': 'resources/startup/1536x2008.png',
        '1496x2048': 'resources/startup/1496x2048.png'
    },

    launch: function() {
        // Destroy the #appLoadingIndicator element
        Ext.fly('appLoadingIndicator').destroy();

        // Initialize the main view
        Ext.Viewport.add(Ext.create('HelloWorld.view.Main'));
    },

    onUpdated: function() {              // <2>
        Ext.Msg.confirm(
            "Application Update",
            "This application has just successfully
             been updated to the latest version. Reload now?",
            function(buttonId) {
                if (buttonId === 'yes') {
                    window.location.reload();
                }
            }
        );
    }
});
----
====

<1> This code instructs the loader that any class that starts with _Ext_ can be found in the directory _touch/src_ or its subdirectories. The classes with names that begin with _HelloWorld_ are under the _app_ directory.

<2> This is an interception of the event that's triggered if the code on the server is updated. The user is warned that the new version of the application has been downloaded. You can see more on this in the comments to _app.js_ in the section <<using_sencha_touch_for_STC>>.

The code of the generated main view of this application (_Main.js_) is shown next. It extends the class `Ext.tab.Panel` so that each page of the application is one tab in this panel. <<FIG13-4>> is a snapshot of a collapsed version of _Main.js_ taken from the http://www.jetbrains.com/webstorm/[WebStorm IDE] from JetBrains, which is our IDE of choice in this chapter. 

[[FIG13-4]]
.Collapsed version of Main.js from Hello World
image::images/ewdv_1204.png[image]

As you can see from this figure, the `items[]` array includes two objects, Welcome and Get Started, and each of them represents a tab (screen) on the panel. <<ex_code_for_welcome_get_started>> shows the code of the Welcome and Get Started screens.

[[ex_code_for_welcome_get_started]]
.Code of the Welcome and Get Started screens
====
[source, html]
----
Ext.define('HelloWorld.view.Main', {
  extend: 'Ext.tab.Panel',
  xtype: 'main',
  requires: [
      'Ext.TitleBar',
      'Ext.Video'
  ],
  config: {
    tabBarPosition: 'bottom',          // <1>

    items: [
        {                              // <2>
            title: 'Welcome',
            iconCls: 'home',

            styleHtmlContent: true,
            scrollable: true,

            items: {
                docked: 'top',
                xtype: 'titlebar',
                title: 'Welcome to Sencha Touch 2'
            },

            html: [
                "You've just generated a new Sencha Touch 2 project." 
                "What you're looking at right now is the ",
                "contents of <a target='_blank' href=\"app/view/Main.js\">"
                "app/view/Main.js</a> - edit that file ",
                "and refresh to change what's rendered here."
            ].join("")
        },
        {                               // <3>
            title: 'Get Started',
            iconCls: 'action',

            items: [
                {
                    docked: 'top',
                    xtype: 'titlebar',
                    title: 'Getting Started'
                },
                {
                    xtype: 'video',
                    url: 'http://av.vimeo.com/64284/137/87347327.mp4?token=
                    1330978144_f9b698fea38cd408d52a2
                    393240c896c',
                    posterUrl: 
                          'http://b.vimeocdn.com/ts/261/062/261062119_640.jpg'
                }
            ]
        }
      ]
  }
});
----
====

<1> The tab bar has to be located at the bottom of the screen.

<2> The first tab is a Welcome screen.

<3> The second tab is the Getting Started screen. It has `xtype: video`, which means it's ready for playing video located at the specified `url`.   

This application has no controllers, models, or stores. But it does include the default theme from the SASS stylesheet _resources/sass/app.scss_, which was compiled by the Sencha CMD generation process into the file _resources/css/app.css_. 

==== Constructing the UI  

Sencha Touch has UI components specifically designed for mobile devices. These components include lists, forms, toolbars, buttons, charts, audio, video, carousels, and more.  The quickest way to become familiar with them is by browsing the http://dev.sencha.com/deploy/touch/examples/production/kitchensink/[Kitchen Sink] website, where you can find examples of how UI components look and see the source code.(((Sencha Touch framework, UI construction, components available)))

===== Containers

In general, the process of implementing a mobile application with Sencha Touch consists of selecting appropriate containers and arranging navigation among them. Each screen that a user sees is a container. Often, it will include a toolbar _docked_ at the top or bottom of the container.((("user interface (UI)", "containers in Sencha Touch")))(((containers, hierarchy in Sencha Touch)))(((Sencha Touch framework, UI construction, containers)))(((toolbars, docked)))

Containers can be nested; they are needed for better grouping of UI components on the screen. The lightest container is `Ext.Container`. It inherits all the functionality from its ancestor `Ext.Component`, plus it can contain other components. When you review the code of the Save The Child application, note that the main view `SSC.view.Main` from _Main.js_ extends `Ext.Container`. The hierarchy of Sencha Touch containers is shown in <<FIG13-5>>.

[[FIG13-5]]
.Sencha Touch containers hierarchy
image::images/ewdv_1205.png[scale="50"]

The `FieldSet` is also a pretty light container; it simply adds a title to a group of fields that belong together. You'll see several code samples in this chapter with `xtype: 'fieldset'` (for example, Login or Donate screens). 

If your containers display forms with such inputs as text field, text area, password, and numbers, the virtual keyboard will automatically show up, occupying half of the user's screen. On some platforms, virtual keyboards adapt to the type of input field--for example, if the field has `xtype: 'emailfield'`, the keyboard will be modified for easier input of emails. <<FIG13-6>> is a snapshot taken from the Donate screen of the Save The Child application as the user taps inside the Email field. Note the key with the "at" sign (@) on the main keyboard, which wouldn't be shown for non-email inputs.  

[[FIG13-6]]
.The iPhone virtual keyboard for entering emails
image::images/ewdv_1206.png[scale="50"]

If the field is for entering a URL (`xtype: 'urlfield'`), expect to see a virtual keyboard with a button labeled _.com_. If the input field has `xtype: 'numberfield'`, the user might see a numeric keyboard when the focus is in this field.

TIP: If you need to detect the environment on the user's mobile device, use `Ext.os.` to detect the operating system, `Ext.browser` to dtect the browser, and `Ext.feature` to detect supported features.

===== Layouts

Besides grouping components, containers allow you to assign a `Layout` to control its children arrangements. In desktop applications, physical screens are larger, and often you can place multiple containers on the same screen at the same time. In the mobile world, you don't have that luxury, and typically you'll be showing just one container at a time. Not all http://docs.sencha.com/touch/2.0.2/#!/guide/layouts[layouts] are practical to use on smaller screens, which is why not all Ext JS layouts are supported in Sencha Touch.(((Sencha Touch framework, UI construction, layouts)))(((page layout, in Sencha Touch)))  

<<FIG13-13>>, shown later in this chapter, illustrates the main container that shows either the `tabpanel` or `loginform`. The `tabpanel` is a container with a special layout that shows only one of its child containers at a time (for example, About or Donate). You can see all these components in action at http://savesickchild.org/[savesickchild.org]--just run the Sencha Touch version of our Save The Child application and view the sources.

By default, a container's layout is `auto`, which instructs the rendering engine to use the entire width of the container, but use just enough height to display the children. This behavior is similar to the `vbox` layout (vertical box), in which all components are added to the container vertically, one below another. Accordingly, the `hbox` arranges all components horizontally, one next to the other. 

TIP: If you want to control how much overtical or horizontal screen space is given to each component, use the `flex` property as described in Chapter 4 in the section <<using_the_flex_property>>.

The http://docs.sencha.com/touch/2.3.0/#!/guide/layouts-section-fit-layout[`fit`] layout fills the entire container's space with its child element. If you have more than one child element in the container, the first one will fill the entire space and the other one will be ignored. 

The http://docs.sencha.com/touch/2.0.2/#!/guide/layouts-section-card-layout[`card`] layout can accommodate multiple children while displaying only one at a time. The container's method `setActiveItem()` allows you to programmatically select the "card" to be on top of the deck. With  a +card+ layout, all containers are preloaded to the device, but if you want to create new containers at runtime, you can use the method `setActiveItem()`, passing a `config` object that describes the new container.

You can find examples of `card` and `fit` layouts in the code of _Main.js_ of the Save The Child application. <<FIG13-14>> shows the `card` layout, but if you expand the `tabpanel` container, each tab has the `fit` layout. 

The classes `TabPanel` and `Carousel` represent two implementations of containers that use the `card` layout.

===== Events

Events can be initiated either by the browser or by the user. The section <<working_with_events>> in Chapter 4 covers general rules of dealing with events in the Ext JS framework. Many system events are dispatched during UI component rendering. The online documentation lists every event that can be dispatched on Sencha classes. Look for the Events section on the top toolbar in the online documentation. <<FIG13-7>> is a snapshot from online documentation for the class `Ext.Container`, which has 32 events.(((Sencha Touch framework, UI construction, events)))((("user interface (UI)", "events in Sencha Touch")))(((events, in Sencha Touch)))

[[FIG13-7]]
.Events in the Sencha online documentation 
image::images/ewdv_1207.png[image] 

Sencha Touch knows how to handle various mobile-specific events. Check out the documentation for the class http://docs.sencha.com/touch/2.3.1/#!/api/Ext.dom.Element[`Ext.dom.Element`]: you'll find such events as `touchstart`, `touchend`, `tap`, `doubletap`, `swipe`, `pinch`, `longpress`, `rotate`, and others. 

You can add event listeners by using techniques. One of them is defining the http://docs.sencha.com/touch/2.3.1/#!/api/Ext.Container-cfg-listeners[`listeners`] `config` property during object instantiation. This property is declared in the `Ext.Container` object and makes it possible for you to define more than one listener at a time. You should use it while calling the `Ext.create()` method:

[source, javascript]
----
Ext.create('Ext.button.Button', {
   listeners: {
     tap: function() { // handle event here }
   }
}
----  

If you need to handle an event only once, you can use the option `single: true`, which will automatically remove the  listener after the first handling of the event. For example: 

[source, javascript]
----
listeners: {
  tap: function() { // handle event here },
  single: true
}
----

TIP: Read the comments to the code of `SSC.view.CampaignsMap` in <<developing_in_ext_js>> about the right place for declaring listeners.

You can also define event handlers by using yet another `config` property, `control` from `Ext.Container`. <<ex_register_tap_events>> is a code fragment from the Login controller of the Save The Child application. It shows how to assign the `tap` event handler functions `showLoginView()` and `cancelLogin()` for the Login and Cancel buttons.

[[ex_register_tap_events]]
.Registering tap event handlers
====
[source, javascript]
----
Ext.define('SSC.controller.Login', {
    extend: 'Ext.app.Controller',
    
    config: {

        control: {
            loginButton: {
                tap: 'showLoginView'
            },
            cancelButton: {
                tap: 'cancelLogin'
            }
        }
    },
    showLoginView: function () {
      // code of this function is removed for brevity
    },

    cancelLogin: function () { 
      // code of this function is removed for brevity
    }  
});    
----
====

NOTE: With the proliferation of touch screens, Sencha has introduced the `tap` gesture, which is semantically equivalent to the `click` event.(((tap gesture)))(((Sencha Touch framework, tap gesture)))(((click event))) 

Read more about the role of controllers in event handling in the section <<controller>>. Online documentation includes the http://docs.sencha.com/touch/2.3.1/#!/guide/events[Event Guide], which describes the process of handling events in detail.

TIP: If you want to fire custom events, use the method `fireEvent()`, providing the name of your event. The procedure for defining the listeners for custom events remains the same.

NOTE: Bring Your Own Device (BYOD) is becoming more and more popular in enterprises. Sencha offers a product called Sencha Space, which is a secure and managed environment for deploying enterprise HTML5 applications that can be run on a variety of devices that employees bring to the workplace. Sencha Space promises a clear separation between work-related applications and personal data. It uses a secure database and secure file API and facilitates app-to-app communication. For more details, visit the http://www.sencha.com/products/space/[Sencha Space web page].(((Sencha Space)))((("BYOD (bring your own device)")))(((security, managed environments)))(((managed environments)))  


[[using_sencha_touch_for_STC]]
=== Using Sencha Touch for Save The Child

The Sencha Touch version of the Save The Child application is based on the mock-up presented in Chapter 11 (<<prototyping>>) with some minor changes. This time, the home page of the application will be a slightly different version of the About page shown in <<FIG13-11>>. 

==== Building the Application

The materials presented in this chapter were tested with the Sencha Touch 2.3.1 framework, which was current at the time of this writing, and you can use the source code of the Save The Child application that comes with the book. It's packaged with Sencha 2.3.1. We've also deployed this application at http://savesickchild.org:8080/ssc-touch-prod/[http://savesickchild.org:8080/ssc-touch-prod]. 

If you need to use a newer version of Sencha Touch, just download and unzip it to the directory of your choice (in our case, we use  _/Library/touch-2.3.1_). Download the book code and remove the content of the _touch_ directory from _Lesson12/ssc-mobile_. After that, +cd+ to this directory and copy a newer version of Sencha Touch there. For example, on Mac OS we did it as follows:

_cd ssc-mobile
cp -r /Library/touch-2.3.1/ touch_

Then, run the Sencha CMD (version 4 or above) command to make a production build of the application and start the embedded web server:

_sencha app build
sencha web start_

Finally, open this application at http://localhost:1841 in one of the emulators or just on your desktop browser. You'll see the starting page that looks like <<FIG13-11>>.

[[FIG13-11]]
.The Starting/About page
image::images/ewdv_1208.png[]

We'll review the code of this application next.

==== The Application Object 

The code of the _app.js_ in the Save The Child project is shown in <<ex_app-js_for_save_the_child>> (we removed the default startup images and icons for brevity). For the most part, it has the same structure as the Ext JS applications.(((Sencha Touch framework, application programming, application object))) 

[[ex_app-js_for_save_the_child]]
.The app.js file of Save The Child 
====
[source, javascript]
----
Ext.application({
    name: 'SSC',

    requires: [
        'Ext.MessageBox'
    ],

    views: [
        'About',
        'CampaignsMap',
        'DonateForm',
        'DonorsChart',
        'LoginForm',
        'LoginToolbar',
        'Main',
        'Media',
        'Share',
        'ShareTile'
    ],

    stores: [
        'Campaigns',
        'Countries',
        'Donors',
        'States',
        'Videos'
    ],

    controllers: [
        'Login'
    ],

    launch: function() {
        // Destroy the #appLoadingIndicator element
        Ext.fly('appLoadingIndicator').destroy();

        // Initialize the main view
        Ext.Viewport.add(Ext.create('SSC.view.Main'));
    },

    onUpdated: function() {
        Ext.Msg.confirm(
            "Application Update",
            "This application has just successfully been updated to the latest "
            "version. Reload now?",
            function(buttonId) {
                if (buttonId === 'yes') {
                    window.location.reload();
                }
            }
        );
    }
});
----
====

NOTE: Compare this application object with that of Ext JS, shown in Chapter 4 (<<best_practices_MVC>>). They are similar.

The application loads all the dependencies listed in _app.js_ and instantiates models and stores. The views that require data from the store will either mention the store name (for example, `store: 'Videos'`) or will use the +get+ method from the class `StoreMgr` (for example, `Ext.StoreMgr.get('Campaigns');`). After this is done, the `launch` function is called--and this is where the main view is created.

In this version of the Save The Child application, we have only one controller, `Login`, that doesn't use any stores, but the mechanism of pointing controllers to the appropriate store instances is the same as for views. The application instantiates all controllers automatically. Accordingly, all controllers live in the context of the http://docs.sencha.com/touch/2.3.1/#!/api/Ext.app.Application[Application] object. 

We don't use explicitly defined models here. All the data is hard-coded in the stores in the `data` attributes. 

You'll see the code of the views a bit later, but we want to draw your attention to the `onUpdated()` event handler. In the earlier section <<microloaders_configurations>>, we mentioned that production builds of Sencha Touch applications watch the locally cached JavaScript and CSS files listed in the JS and CSS sections of the configuration file _app.json_ and compare them with their peers on the server. They also watch all the files listed in the `appCache` section of _app.json_. If any of these files change, the `onUpdated` event handler is invoked. For illustration purposes, we decided to intercept this event. <<FIG13-12>> shows how the update prompt looks on iPhone 5.

[[FIG13-12]]
.The code on the server has changed.
image::images/ewdv_1209.png[]

At this point, the user can either choose to work with the previous version of the application or reload the new one. 

Our _index.html_ file includes one more scripts (besides the microloader script) that support the Google Maps API:

[source, html]
----
<script type="text/javascript" 
        src="http://maps.google.com/maps/api/js?sensor=true"></script>
---- 

TIP: If you want your program documentation to look as good as Sencha's, use the https://github.com/senchalabs/jsduck[JSDuck tool].

==== The Main View

The code of the UI landing page of this application is located in the _views_ folder in the file _Main.js_. First, take a look at the screenshot from WebStorm in <<FIG13-13>>; note that it shows only two objects on the top level: the container and a login form.(((Sencha Touch framework, application programming, main view)))  

[[FIG13-13]]
.Main.js in a collapsed form
image::images/ewdv_1210.png[] 

The `card` layout means that the user will see either the content of that container or the login form--one at a time. Let's open the container. It has an array of children, which are our application pages. <<FIG13-14>> shows the titles of the children.

[[FIG13-14]]
.TabPanel's children in a collapsed form
image::images/ewdv_1211.png[] 

The entire code of _Main.js_ is shown in <<ex_complete_main-js>>.

[[ex_complete_main-js]]
.The complete version of Main.js
====
[source, javascript]
----
Ext.define('SSC.view.Main', {
 extend: 'Ext.Container',
 xtype: 'mainview',                             // <1>
 requires: [
     'Ext.tab.Panel',
     'Ext.Map',
     'Ext.Img'
 ],

 config: {
    layout: 'card',

    items: [
     {
      xtype: 'tabpanel',                         // <2>
              tabBarPosition: 'bottom',

             items: [
               {
                     title: 'About',
                     iconCls: 'info',      // <3>
                     layout: 'fit',        // <4>
                     items: [
                         {xtype: 'aboutview'
                         }
                     ]
                },
               {
                     title: 'Donate',
                     iconCls: 'love',
                     layout: 'fit',
                     items: [
                         {xtype: 'logintoolbar',   // <5>
                          title: 'Donate'
                         },
                         {xtype: 'donateform'
                         }
                     ]
                },
               {
                     title: 'Stats',
                     iconCls: 'pie',
                     layout: 'fit',
                     items: [
                         {xtype: 'logintoolbar',
                          title: 'Stats'
                         },
                         {xtype: 'donorschart'
                         }
                     ]
                 },
               {
                    title: 'Events',
                    iconCls: 'pin',
                    layout: 'fit',
                    items: [
                        {xtype: 'logintoolbar',
                         title: 'Events'
                        },
                        {xtype: 'campaignsmap'
                        }
                    ]
                },
               {
                    title: 'Media',
                    iconCls: 'media',
                    layout: 'fit',
                    items: [
                        {xtype: 'mediaview'
                        }
                    ]
                },
               {
                    title: 'Share',
                    iconCls: 'share',
                    layout: 'fit',
                    items: [
                        {xtype: 'logintoolbar',
                            title: 'Share'
                        },
                        {xtype: 'shareview'
                        }
                    ]
                }
             ]
     },

     {xtype: 'loginform',
         showAnimation: {
             type: 'slide',
             direction: 'up',
             duration: 200
         }
     }
    ]
 }
});
----
====

<1> We've assigned the `xtype: 'mainview'` to the main view so that the Login controller can refer to it. 
<2> Note that the `tabpanel` doesn't explicitly specify any layout; it uses `card` by default.

<3> Each tab has a corresponding button on the toolbar. It shows the text from the `title` attribute and the icon specified in the class `iconCls`. 

<4> Each view has the http://bit.ly/1h8ANPP[`fit` layout], which forces the content to expand to fill the layout's container.

<5> Each view has a Login button on the toolbar. It's implemented in _LoginToolbar.js_, shown later in this chapter.

Sencha Touch can render icons by using icon fonts from the http://pictos.cc/[Pictos library] located in the folder _resources/sass/stylesheets/fonts_.  We've used icon fonts in the jQuery Mobile version of our application, and in this version we'll also use fonts, which consume much less memory than images. <<ex_app_styles_in_app-scss>> presents the content of our _app.scss_ file, which includes several font icons used in the Save The Child application. 

[[ex_app_styles_in_app-scss]]
.The application styles are located in app.scss
====
[source, css]
----
@import 'sencha-touch/default';
@import 'sencha-touch/default/all';

@include icon-font('IcoMoon', inline-font-files('icomoon/icomoon.woff', woff, 
'icomoon/icomoon.ttf', truetype,'icomoon/icomoon.svg', svg));
@include icon('info',  '!', 'IcoMoon');
@include icon('love',  '"', 'IcoMoon');
@include icon('pie',   '#', 'IcoMoon');
@include icon('pin',   '$', 'IcoMoon');
@include icon('media', '%', 'IcoMoon');
@include icon('share', '&', 'IcoMoon');

.child-img {
  border: 1px solid #999;
}

// Reduce size of the icons to fit 6 buttons in the tabbar; add Share tab
.x-tabbar.x-docked-bottom .x-tab {
  min-width: 2.8em;

  .x-button-icon:before {
    font-size: 1.4em;
  }
}

// Share icons
.icon-twitter, .icon-facebook, .icon-google-plus, .icon-camera {
  font-family: 'icomoon';
  speak: none;
  font-style: normal;
  font-weight: normal;
  font-variant: normal;
  text-transform: none;
  line-height: 1;
  -webkit-font-smoothing: antialiased;
}
.icon-twitter:before {
  content: "\27";
}
.icon-facebook:before {
  content: "\28";
}
.icon-google-plus:before {
  content: "\29";
}
.icon-camera:before {
  content: "\2a";
}

// Share tiles
.share-tile {
  top: 25%;
  width: 100%;
  position: absolute;
  text-align: center;
  border-width: 0 1px 1px 0;

  p:nth-child(1) {
    font-size:4em;
  }

  p:nth-child(2) {
    margin-top: 1.5em;
    font-size: 0.9em;
  }
}

$sharetile-border: #666 solid;

.sharetile-twitter {
  border: $sharetile-border;
  border-width: 0 1px 1px 0;
}

.sharetile-facebook {
  border: $sharetile-border;
  border-width: 0 0 1px;
}

.sharetile-gplus {
  border: $sharetile-border;
  border-width: 0 1px 0 0;
}

// Media
.x-videos {
  .x-list-item > .x-innerhtml {
    font-weight: bold;
    line-height: 18px;
    min-height: 88px;

    > span {
      display: block;
      font-size: 14px;
      font-weight: normal;
    }
  }

  .preview {
    float: left;
    height: 64px;
    width: 64px;
    margin-right: 10px;
    background-size: cover;
    background-position: center center;
    background: #eee;
    @include border-radius(3px);
    -webkit-box-shadow: inset 0 0 2px rgba(0,0,0,.6);
  }

  .x-item-pressed,
  .x-item-selected {
    border-top-color: #D1D1D1 !important;
  }
}
----
====

The first two lines of _app.scss_ import the icons from the default theme. We've added several more. Note that we had to reduce the size of the icons to fit six buttons in the application's toolbar. All the `@include` statements use the SASS mixin `icon()`.  

If you need more icons, use the http://icomoon.io/app/[IcoMoon application]. Pick an icon there and click the Font button to generate a custom font (see <<FIG13-14-2>>). Download and copy the generated fonts into your _resources/sass/stylesheets/fonts_ directory and add them to _app.scss_ by using the `@include icon-font` directive. The downloaded ZIP file will contain the fonts as well as the _index.html_ file that will show you the class name and the code of the generated font icon(s).

[[FIG13-14-2]]
.Generating Twitter icon font with IcoMoon
image::images/ewdv_1212.png[] 

When you compile the SASS with http://compass-style.org/help/tutorials/command-line/[compass] (or build the application by using Sencha CMD), the SASS styles are converted into a standard CSS file, _resources/css/app.css_.


[[controller]]
==== Controller

Now let's review the code of the Login page controller, which reacts to the user's actions performed in the view LoginForm. The name of the controller's file is _Login.js_. It's located in the folder _controller_, and <<ex_login_controller>> presents the code.(((Sencha Touch framework, application programming, login controller))) 

[[ex_login_controller]]
.The Login controller
====
[source, javascript]
----
Ext.define('SSC.controller.Login', {
    extend: 'Ext.app.Controller',

    config: {
        refs: {
            mainView: 'mainview',                 // <1>
            loginForm: 'loginform',               // <2>
            loginButton: 'button[action=login]',  // <3> 
            cancelButton: 'loginform button[action=cancel]'
        },

        control: {                                 // <4>
            loginButton: {
                tap: 'showLoginView'
            },
            cancelButton: {
                tap: 'cancelLogin'
            }
        }
    },

    showLoginView: function () {
        this.getMainView().setActiveItem(1);  // <5>
    },

    cancelLogin: function () {
        this.getMainView().setActiveItem(0);  //  <6> 
    }

});
----
====

<1> Including `mainView: 'mainview'` in the `refs` attribute forces Sencha Touch to generate the getter function `getMainView()`, providing access to the main view if need be.

<2> This controller uses components from the LoginForm view (its code comes a bit later).

<3> The +loginButton+ is the one that has `action=login`. The +cancelButton+ is the one that's located inside the `loginform` and has `action=cancel`.

<4>  Defining the event handlers for tap events for the buttons Login and Cancel from the LoginForm view.

<5> The main view has two children (see <<FIG13-13>>). When the user taps the Login button, show the second child: `setActiveItem(1)`.
  
<6> When the user clicks the Cancel button, show the main container: the first child of the main view, `setActiveItem(0)`.

TIP: Controllers are automatically instantiated by the `Application` object. If you want a controller's code to be executed even before the application `launch` function is called, put it in the `init` function. If you want code to be executed right after the application is launched, put it in the controller's `launch` function.

For illustration purposes, we'll show you a shorter (but not necessarily better) version of _Login.js_. The preceding code defines a reference to the login form and button selectors in the `refs` section. Sencha Touch will find the references and generate the getter for these buttons. But in this particular example, we are using these buttons only to assign them the event handlers. Hence, we can make the `refs` section slimmer and use the selectors right inside the `control` section, as shown in <<ex_reducing_ref_in_login_controller>>.

[[ex_reducing_ref_in_login_controller]]
.Making the +ref+ section slimmer in Login controller
====
[source, javascript]
----
Ext.define('SSC.controller.Login', {
    extend: 'Ext.app.Controller',

    config: {
        refs: {
            mainView: 'mainview',
        },

        control: {
            'button[action=login]': {
                tap: 'showLoginView'
            },
            'loginform button[action=cancel]': {
                tap: 'cancelLogin'
            }
        }
    },

    showLoginView: function () {
        this.getMainView().setActiveItem(1);
    },

    cancelLogin: function () {
        this.getMainView().setActiveItem(0);
    }
});
----
====

This version of _Login.js_ is shorter, but the first one is more generic. In both versions, the button selectors are the shortcuts for the http://docs.sencha.com/touch/2.3.1/#!/api/Ext.ComponentQuery[`ComponentQuery`] class, which is a singleton that is used to search for components. 

With the Model-View-Controller (MVC) pattern, the event-processing logic is often located in controller classes. By using `refs` and `ComponentQuery` selectors, you can reach event-generating objects located in different classes. For example, if the user taps a button in a view, the controller's code includes the `tap` event handler, where it triggers an event on a store class to initiate the data retrieval.((("Model-View-Controller (MVC) design pattern", "event-processing logic in")))

But if the `control` config is defined not in the controller, but in a component, the scope where `ComponentQuery` operates is limited to the component itself. You'll see an example of using the `control` config inside _DonateForm.js_, later in this chapter.


==== Other Views in Save The Child

Let's do a brief code review of the other Save The Child views. 

===== LoginForm

<<FIG13-15>> is a snapshot of the Login view taken from an iPhone 5, which was the only mobile device on which we've tested this application.(((Sencha Touch framework, application programming, login form)))(((login section)))

[[FIG13-15]]
.The Login form view
image::images/ewdv_1213.png[] 
 
<<ex_code_for_the_login_form>> shows the code of the Login form view; it's self-explanatory. The `ui: 'decline'` is the http://try.sencha.com/touch/2.2.0/demos/Ext.Button.ui/[`Ext.Button` style] that causes the Cancel button to have a red background.

[[ex_code_for_the_login_form]]
.TITLE NEEDED FOR THIS EXAMPLE
====
[source, javascript]
----
Ext.define('SSC.view.LoginForm', {
  extend: 'Ext.form.Panel',
  xtype: 'loginform',
  requires: [
      'Ext.field.Password'
  ],

  config: {
    items: [
        {   xtype: 'toolbar',
            title: 'Login',

            items: [
                {   xtype: 'button',
                    text: 'Cancel',
                    ui: 'decline',
                    action: 'cancel'
                }
            ]
        },
        {  xtype: 'fieldset',
            title: 'Please enter your credentials',

            defaults: {
                labelWidth: '35%'
            },

            items: [
                {   xtype: 'textfield',
                    label: 'Username'
                },
                {   xtype: 'passwordfield',
                    label: 'Password'
                }
            ]
        },
        {  xtype: 'button',
            text: 'Login',
            ui: 'confirm',
            margin: '0 10'
        }
    ]
  }
});
----
====

NOTE: One of the reviewers of this book reported that the text fields from this Login form do not display on his Android Nexus 4 smartphone. This can happen, and it illustrates why real-world applications should be tested on a variety of mobile devices. If you run into a similar situation while developing your application with Sencha Touch, use http://www.sencha.com/blog/new-themes-in-sencha-touch-2-2[platform-specific themes], which are automatically loaded based on the detected user's platform (see http://docs.sencha.com/touch/2.2.1/#!/guide/theming-section-Platforms[`platformConfig` object]). Sencha Touch offers a number of http://www.sencha.com/products/touch/features/#touch-themes[out-of-the-box schemes] and https://vimeo.com/66191847[theme switching capabilities].(((Sencha Touch framework, platform-specific themes)))(((themes)))  

The Login form displays when the user clicks the Login button that is displayed on each other page in the toolbar. For example, <<FIG13-16>> shows the top portion of the Donate view.

[[FIG13-16]]
.The Login toolbar
image::images/ewdv_1214.png[] 

The Login button is added as `xtype: 'logintoolbar'` to the top of each view in _Main.js_. It's implemented in _LoginToolbar.js+, shown in <<ex_loginform-js>>.

[[ex_loginform-js]]
.The LoginForm.js
====
[source, javascript]
----
Ext.define('SSC.view.LoginToolbar', {
  extend: 'Ext.Toolbar',
  xtype: 'logintoolbar',

  config: {
      title: 'Save The Child',
      docked: 'top',                // <1>

      items: [
          {
              xtype: 'spacer'       // <2> 
          },
          {
              xtype: 'button',
              action: 'login',
              text: 'Login'
          }
      ]
  }
});
----
====

<1> The Login toolbar has to be located at the top of the screen.

<2> Adding the `Ext.Spacer` component to occupy all the space before the Login button. By default, the spacer has a flex value of 1, which means it takes all the space in this situation. You can read more about it in Chapter 4 in the section <<using_the_flex_property>>.  

TIP: If you add the Save The Child application as an icon to the home screen on iOS devices, the browser's address bar will not be displayed.


===== DonateForm

We want to make the Donate view look like the mock-up that our web designer, Jerry, supplied for us (See <<FIG12-13>>). With jQuery Mobile, it's simple: the HTML container `<fieldset data-role="controlgroup" data-type="horizontal" id="radio-container">` with a bunch of `<input type="radio">` rendered the horizontal button bar shown in <<FIG12-28>>. <<ex_initial_version_of_donateform-js>> shows the fragment from the initial Sencha Touch version of _DonateForm.js_. (((Sencha Touch framework, application programming, donate form)))(((donate section)))

[[ex_initial_version_of_donateform-js]]
.The fragment of the initial version of DonateForm.js
====
[source, javascript]
----
 config: {
  title: 'DonateForm',

  items: [
      { xtype: 'fieldset',
          title: 'Please select donation amount',

          defaults: {
              name: 'amount',
              xtype: 'radiofield'
          },

          items: [
              { label: '$10',
                value: 10
              },
              { label: '$20',
                 value: 20
              },
              { label: '$50',
                value: 50
              },
              { label: '$100',
                  value: 100
              }
          ]
      },
      { xtype: 'fieldset',
        title: '... or enter other amount',

          items: [
              { xtype: 'numberfield',
                label: 'Amount',
                name: 'amount'
              }
          ]
      }
----
====

It's also a `fieldset` with several radio buttons, `xtype: 'radiofield'`. But the result is not what we expected. These four radio buttons occupy half of the screen, which looks like <<FIG13-17>>.

[[FIG13-17]]
.Rendering of xtype radio field 
image::images/ewdv_1215.png[] 

After doing some research, we discovered that Sencha Touch has a UI component called http://docs.sencha.com/touch/2.3.1/#!/api/Ext.SegmentedButton[`Ext.SegmentedButton`] with which you can create a horizontal bar with toggle buttons, which is exactly what is needed from the rendering perspective. The resulting Donate screen is shown in <<FIG13-18>>. 

[[FIG13-18]]
.Donate form with SegmentedButton
image::images/ewdv_1216.png[]

This looks nice, but as opposed to a regular HTML form with inputs, the `SegmentedButton` is not an HTML `<input>` field and its value won't be automatically submitted to the server. This requires a little bit of a manual coding, which will be explained as a part of the `DonateForm` code review that follows (we've split it into two fragments for better readability). <<ex_final_version_donateform-js_part1>> shows the first part.(((SegmentedButton)))

[[ex_final_version_donateform-js_part1]]
.The final version of DonateForm.js, part 1
====
[source, javascript]
----
Ext.define('SSC.view.DonateForm', {
 extend: 'Ext.form.Panel',
 xtype: 'donateform',
 requires: [
     'Ext.form.FieldSet',
     'Ext.field.Select',
     'Ext.field.Number',
     'Ext.field.Radio',
     'Ext.field.Email',
     'Ext.field.Hidden',
     'Ext.SegmentedButton',
     'Ext.Label'
 ],

 config: {
     title: 'DonateForm',

     control: {                              // <1>  
         'segmentedbutton': {
             toggle: 'onAmountButtonChange'
         },
         'numberfield[name=amount]': {
             change: 'onAmountFieldChange'
         }
     },

     items: [
         { xtype: 'label',
            cls: 'x-form-fieldset-title',    // <2>
            html: 'Please select donation amount:'
         },
         { xtype: 'segmentedbutton',          // <3> 
           margin: '0 10',

           defaults: {
               flex: 1
           },

           items: [
                 { text: '$10',
                   data: {
                     value: 10                // <4>
                   }
                 },
                 { text: '$20',
                   data: {
                     value: 20
                    }
                 },
                 { text: '$50',
                   data: {
                     value: 50
                   }
                 },
                 { text: '$100',
                   data: {
                     value: 100
                   }
                 }
             ]
         },
         { xtype: 'hiddenfield',             // <5>
           name: 'amount'
         },
----
====

<1> Define event listeners for the `segmentedbutton` and the field for entering another amount. When the control section is used not in a controller, but in a component, it's scoped to the object in which it was defined. Hence the `ComponentQuery` will be looking for `segmentedbutton` and `numberfield[name=amount]` only within the +DonateForm+ instance. If these event handlers were defined in the controller, the scope would be global.

<2> Borrow the class that Sencha Touch uses for all `fieldset` container, so our title looks the same.

<3> The `segmentedbutton` is defined here. By default, its config property is `allowToggle=true`, which allows only one button to be pressed at a time.

<4> The `segmentedbutton` has no property to store the value of each button. But any  sublcass of `Ext.Component` has the property `data`. We are extending the `data` property to store the button's `value`. It will be available in the event handler in `button.getData().value`.
 
<5> Because the buttons in the `segmentedbutton` are not input fields, we define a hidden field to remember the currently selected amount. 

<<ex_final_version_donateform-js_part2>> presents the second half of `SSC.view.DonateForm`.  

[[ex_final_version_donateform-js_part2]]
.The final version of DonateForm.js, part 2
====
[source, javascript]
----

         { xtype: 'fieldset',
           title: '... or enter other amount',

             items: [
                 { xtype: 'numberfield',     //  <1>
                   label: 'Amount',
                   name: 'amount'
                 }
             ]
         },
         {
           xtype: 'fieldset',
           title: 'Donor information',

           items: [
             { name: 'fullName',
               xtype: 'textfield',
               label: 'Full name'
             },
             { name: 'email',
               xtype: 'emailfield',
               label: 'Email'
              }
           ]
         },
         {
             xtype: 'fieldset',
             title: 'Location',

             items: [
                 {  name: 'address',
                    xtype: 'textfield',
                    label: 'Address'
                 },
                 {  name: 'city',
                    xtype: 'textfield',
                    label: 'City'
                 },
                 {  name: 'zip',
                    xtype: 'textfield',
                    label: 'Zip'
                 },
                 {  name: 'state',
                    xtype: 'selectfield',
                    autoSelect: false,
                    label: 'State',
                    store: 'States',
                    valueField: 'id',
                    displayField: 'name'
                 },
                 {  name: 'country',
                    xtype: 'selectfield',
                    autoSelect: false,
                    label: 'Country',
                    store: 'Countries',
                    valueField: 'id',
                    displayField: 'name'
                 }
             ]
         },
         {
             xtype: 'button',
             text: 'Donate',
             ui: 'confirm',
             margin: '0 10 20'
         }
     ]
 },

 onAmountButtonChange: function (segButton, 
                                button, isPressed) { // <2>
  
  if (isPressed) {                                   // <3>
      this.clearAmountField();
      this.updateHiddenAmountField(button.getData().value);
      button.setUi('confirm');                       // <4>
  }
  else {
      button.setUi('normal');
  }
 },

 onAmountFieldChange: function () {         // <5>

   this.depressAmountButtons();
   this.clearHiddenAmountField();
 },

 clearAmountField: function () {
   var amountField = this.down('numberfield[name=amount]');  

   amountField.suspendEvents();            //  <6>
   amountField.setValue(null);
   amountField.resumeEvents(true);         //  <7>
 },

 updateHiddenAmountField: function (value) {
   this.down('hiddenfield[name=amount]').setValue(value);
 },

 depressAmountButtons: function () {
   this.down('segmentedbutton').setPressedButtons([]);
 },

 clearHiddenAmountField: function () {
   this.updateHiddenAmountField(null);
 }
});
---- 
====


<1> This `numberfield` stores the _other amount_, if entered. Note that it has the same name `amount` as the hidden field. The methods `clearAmountField()` and `clearHiddenAmountField()` ensure that only one of the amounts has a value.

<2>  When the `toggle` event is fired, it comes with an object that contains a reference to the button that was toggled, and whether the button becomes pressed as the result of this event.

<3> The toggle event is dispatched twice: once for the button that is pressed, and again for the button that was pressed before. If the button is clicked (`isPressed=true`), clean the previously selected amount and store a new one in the hidden field. 

<4> Change the style of the button to make it visibly highlighted. We use the predefined +confirm+ style (see the http://dev.sencha.com/deploy/touch/examples/production/kitchensink/#demo/buttons[Kitchen Sink] application for other button styles).

<5> When the _other amount_ field loses focus, this event handler is invoked. The code cleans up the hidden field and removes the pressed state from all buttons.  

<6> Temporarily suspend dispatching events while setting the  value of the amount `numberfield` to null. Otherwise, setting to null would cause unnecessary dispatching of the `change` event. 

<7> Resume event dispatching.  The `true` argument is for discarding all the queued events.

Previous versions of the Save The Child application illustrated how to submit the Donate form to the server for further processing. The Sencha Touch version of this application doesn't include this code. If you'd like to experiment with this, just create a new controller class that extends `Ext.app.Controller` and define an event handler for the Donate Now button (see the Login controller as an example). 

On the `tap` event, invoke `donateform.submit()`, specifying the URL of the server that knows how to process this form. You can find details on submitting and populating forms in the online documentation for http://docs.sencha.com/touch/2.3.1/#!/api/Ext.form.Panel[`Ext.form.Panel`]--the ancestor of the "DonateForm".

TIP: If you want to use Ajax-based form submission, use `submit()`. Otherwise, use the method `standardSubmit()`, which performs a standard HTML form submission.

===== Charts

The charting support is just great in Sencha Touch (and similar to Ext JS). It's JavaScript based, and the charts are live and can get the data from the stores and model. <<FIG13-19>> shows how the chart looks on an iPhone when the user selects the Stats page.(((Sencha Touch framework, application programming, charts)))((("charts", "support in Sencha Touch"))) 

[[FIG13-19]]
.Donor's statistics chart
image::images/ewdv_1217.png[]

The code that supports the UI part of the chart is located in the view +DonorsChart+ that's shown in <<ex_view_donorschart-js>>. It uses the classes located in the Sencha Touch framework in the folder _src/chart_. 

[[ex_view_donorschart-js]]
.The view DonorsChart.js
====
[source, javascript]
----
Ext.define('SSC.view.DonorsChart', {
    extend: 'Ext.chart.PolarChart',         // <1>
    xtype: 'donorschart',

    requires: [
        'Ext.chart.series.Pie',
        'Ext.chart.interactions.Rotate'     // <2>
    ],

    config: {
        store: 'Donors',                    // <3>
        animate: true,
        interactions: ['rotate'],

        legend: {                           // <4> 
            inline: false,
            docked: 'left',
            position: 'bottom'
        },

        series: [
            {
                type: 'pie',
                donut: 20,
                xField: 'donors',
                labelField: 'location',
                showInLegend: true,
                colors: ["#115fa6", "#94ae0a", "#a61120", "#ff8809",
                 "#ffd13e", "#a61187", "#24ad9a", "#7c7474", "#a66111"]
            }
        ]
    }
});
----
====

<1> Create a chart that uses polar coordinates.

<2> The `Rotate` class allows the user to rotate (with a finger) a polar chart around its central point.

<3> The data shown on the chart comes from the store named +Donors+, which is shown in the section <<stores_and_models>>. 

<4> The legend is a bar at the bottom of the screen. The user can horizontally scroll it with a finger.  

===== Media

The Media page of our application displays the list of available videos. When the user taps one of them, a new page opens on which the user must tap the Play button. We use the http://docs.sencha.com/touch/2.3.1/#!/api/Ext.dataview.List[`Ext.dataview.List`] component to display video titles from the `Videos` store.(((Sencha Touch framework, application programming, media)))(((video, in Sencha Touch)))(((Sencha Touch framework, application programming, media)))

The `Media` view extends `Ext.NavigationView`, which is a container with the card layout that also allows pushing a new view into this container. We use it to create a view for the selected video from the list. The code of the `Media` view is shown in <<ex_view_media-js>>.

[[ex_view_media-js]]
.The view Media.js
====
[source, javascript]
----
Ext.define('SSC.view.Media', {
  extend: 'Ext.NavigationView',     
  xtype: 'mediaview',
  requires: [
      'Ext.Video'                       // <1>
  ],

  config: {
      control: {
          'list': {
              itemtap: 'showVideo'      // <2>
          }
      },

      useTitleForBackButtonText: true,  // <3>
      navigationBar: {
          items: [
              {   xtype: 'button',
                  action: 'login',
                  text: 'Login',
                  align: 'right'
              }
          ]
      },

      items: [
          {   title: 'Media',
              xtype: 'list',
              store: 'Videos',
              cls: 'x-videos',
              variableHeights: true,
              itemTpl: [                         // <4>
                  '<div class="preview" 
                  style="background-image:url(resources/media/{thumbnail});">
                  </div>',
                  '{title}',
                  '<span>{description}</span>'
              ]
          }
      ]
  },

  showVideo: function (view, index, target, model) {

      this.push(Ext.create('Ext.Video', {        // <5>
          title: model.get('title'),
          url: 'resources/media/' + model.get('url'),
          posterUrl: 'resources/media/' + model.get('thumbnail')
      }));
  }
});
----  
====

<1> Sencha Touch offers `Ext.Video` a wrapper for the HTML5 `<video>` tag. In <<developing_in_ext_js>>, we used the HTML5 tag `<video>` directly.

<2> Define the event listener for the `itemtap` event, which fires whenever the list item is tapped.

<3> When the video player's view is pushed to the Media page, we want its Back button to display the previous view's title, which is Media. It's a config property in `NavigationView`.    

<4>  The list with descriptions of videos is populated from the store +Videos+ by using the list's config property `itemTpl`. This is an HTML template for rendering each item. We decided to use the `<div>` showing the content of the store's properties `title`, `description` with a background image from the property `thumbnail`, and the video located at the specified `url`. The source code of the store +Videos+ is included in the section <<stores_and_models>>.

<5> Create a video player and push it into `NavigationView`. When the `itemtap` event is fired, it passes several values to the function handler. We just use the `model` that corresponds to the tapped list item. For all available config properties, refer to the http://docs.sencha.com/touch/2.3.1/#!/api/Ext.Video[`Ext.Video` documentation].

NOTE: A template [`Ext.Template`] represents an HTML fragment. The values in square braces are passed to the template from the outside. In the preceding example, the values are coming from the store +Videos+. The class http://docs.sencha.com/touch/2.3.1/#!/api/Ext.XTemplate[`Ext.XTemlate`] offers advanced templating--for example, auto-filling HTML with the data from an array, which is used here.

===== Maps

Integration with Google Maps is a pretty straightforward task in Sencha Touch, which comes with http://docs.sencha.com/touch/2.3.1/#!/api/Ext.Map[`Ext.Map`], a wrapper class for the Google Maps API. Our view `CampainsMap` is a subclass of `Ext.Map`.(((Sencha Touch framework, application programming, maps)))(((geolocation support, maps in Sencha Touch))) Note that we've imported the Google Maps API in the file _index.html_ as follows:

[source, html]
----
<script type="text/javascript" 
        src="http://maps.google.com/maps/api/js?sensor=true"></script>
----

<<FIG13-20>> shows the iPhone's screen when the Events button is tapped. 

[[FIG13-20]]
.The Events page
image::images/ewdv_1218.png[]

Of course, some additional styling is needed before offering this view in a production environment, but the _CampaignsMap.js_ that supports this screen (see <<ex_view_campaignmaps-js>>) is only 90 lines of code!  

[[ex_view_campaignmaps-js]]
.The view CampaignsMap.js
====
[source, javascript]
----
Ext.define('SSC.view.CampaignsMap', {
  extend: 'Ext.Map',
  xtype: 'campaignsmap',

  config: {                                   // <1>
      listeners: {
          maprender: function () {            // <2>

            if (navigator && navigator.onLine) {
                try {
                    this.initMap();
                    this.addCampaignsOnTheMap(this.getMap());
                } catch (e) {
                    this.displayGoogleMapError();
                }
            } else {
                this.displayGoogleMapError();
            }
          }
      }
  },

  initMap: function () {                      
      
      // latitude = 39.8097343 longitude = -98.55561990000001
      // Lebanon, KS 66952, USA Geographic center
      // of the contiguous United States 
      // the center point of the map

      var latMapCenter = 39.8097343,
          lonMapCenter = -98.55561990000001;

      var mapOptions = {
          zoom     : 3,
          center   : new google.maps.LatLng(latMapCenter, lonMapCenter),
          mapTypeId: google.maps.MapTypeId.ROADMAP,
          mapTypeControlOptions: {
              style   : google.maps.MapTypeControlStyle.DROPDOWN_MENU,
              position: google.maps.ControlPosition.TOP_RIGHT
          }
      };

      this.setMapOptions(mapOptions);
  },

  addCampaignsOnTheMap: function (map) {
      var marker,
          infowindow = new google.maps.InfoWindow(),
          geocoder   = new google.maps.Geocoder(),
          campaigns  = Ext.StoreMgr.get('Campaigns');

      campaigns.each(function (campaign) {
          var title       = campaign.get('title'),
              location    = campaign.get('location'),
              description = campaign.get('description');

          geocoder.geocode({
              address: location,
              country: 'USA'
          }, function(results, status) {
              if (status == google.maps.GeocoderStatus.OK) {

                 // getting coordinates
                 var lat = results[0].geometry.location.lat(),
                     lon = results[0].geometry.location.lng();

                 // create marker
                 marker = new google.maps.Marker({
                     position: new google.maps.LatLng(lat, lon),
                     map     : map,
                     title   : location
                 });

                 // adding click event to the marker to show info-bubble 
                 // with data from json
                 google.maps.event.addListener(marker, 'click', (function(marker) 
                     {
                     return function () {
                         var content = Ext.String.format(
                             '<p class="infowindow"><b>{0}</b><br/>{1}
                             <br/><i>{2}</i></p>',
                             title, description, location);

                         infowindow.setContent(content);
                         infowindow.open(map, marker);
                     };
                 })(marker));
              } else {
                 console.error('Error getting location data for address: ' + 
                                                                location);
              }
          });
      });
  },

  displayGoogleMapError: function () {
    console.log("Sorry, Google Map service isn't available");
  }
});
----
====

<1> We use just the `listeners` config here, but `Ext.Map` has 60 of them. For example, if we wanted the mobile device to identify its current location and put it in the center of the map, we'd add `useCurrentLocation: true`.

<2> This event is fired when the map is initially rendered. We are reusing the same code as in previous chapters for initializing the map (showing the central point of the United States) and adding the campaign information. The code of the store +Campaigns+ is shown in the section <<stores_and_models>>. 

Sencha Touch is a framework for mobile devices, which can be on the move. http://docs.sencha.com/touch/2.3.1/#!/api/Ext.util.Geolocation[`Ext.util.Geolocation`] is a handy class for applications that require knowing the current position of the mobile device. When your program instantiates `Geolocation`, it starts tracking the location of the device by firing the `locationupdate` event periodically (you can turn auto updates off). <<ex_current_device_latitude>> shows how to get the current latitude of the mobile device. 

[[ex_current_device_latitude]]
.Getting the current latitude of the device
====
[source, javascript]
----
var geo = Ext.create('Ext.util.Geolocation', {
  listeners: {
    locationupdate: function(geo) {
       console.log('New latitude: ' + geo.getLatitude());
    }
  }  
});

geo.updateLocation();  // start the location updates
----
====

[[stores_and_models]]
==== Stores and Models

In the Sencha Touch version of the Save The Child application, all the data is hard-coded. All store classes are located in the _store_ directory (see <<FIG13-14>>), and each of them has the `data` property. <<ex_video-js_store>> presents the code of _Videos.js_. (((Sencha Touch framework, application programming, stores/models in)))

[[ex_video-js_store]]
.The store Video.js
====
[source, javascript]
----
Ext.define('SSC.store.Videos', {
  extend: 'Ext.data.Store',

  config: {
      fields: [
          { name: 'title',       type: 'string' },
          { name: 'description', type: 'string' },
          { name: 'url',         type: 'string' },
          { name: 'thumbnail',   type: 'string' }
      ],

      data: [
          { title: 'The title of a video-clip 1', description: 'Short video 
          description 1', url: 'intro.mp4', thumbnail: 'intro.jpg' },

          { title: 'The title of a video-clip 2', description: 'Short video 
          description 2', url: 'intro.mp4', thumbnail: 'intro.jpg' },

          { title: 'The title of a video-clip 3', description: 'Short video 
          description 3', url: 'intro.mp4', thumbnail: 'intro.jpg' }
      ]
  }
});
----
====

WARNING: There is a compatibility issue between Ext JS and Sencha Touch 2 stores and models. For example, in the preceding code, `fields` and `data` are wrapped inside the `config` object, whereas in the Ext JS store they are not. Until Sencha offers a generic solution to resolve these compatibility issues, you have to come up with your own if you want to reuse the same stores.(((Ext JS, reusing stores in Sencha Touch)))(((Sencha Touch framework, reusing stores from Ext JS)))

The code of the +Donors+ store supports the charts on the Stats page. It's self-explanatory, as you can see in <<ex_donors-js_store>>.  

[[ex_donors-js_store]]
.The store Donors.js
====
[source, javascript]
----
Ext.define('SSC.store.Donors', {
  extend: 'Ext.data.Store',

  config: {
      fields: [
          { name: 'donors',   type: 'int' },
          { name: 'location', type: 'string' }
      ],

      data: [
          { donors: 48, location: 'Chicago, IL' },
          { donors: 60, location: 'New York, NY' },
          { donors: 90, location: 'Dallas, TX' },
          { donors: 22, location: 'Miami, FL' },
          { donors: 14, location: 'Fargo, ND' },
          { donors: 44, location: 'Long Beach, NY' },
          { donors: 24, location: 'Lynbrook, NY' }
      ]
  }
});
----
====

The +Campaigns+ store is used to display the markers on the map, where charity campaigns are active. Tapping the marker will show the description of the selected campaign, as shown in <<FIG13-20>> (we tapped the Chicago marker). <<ex_campaign-js_store>> presents the code of the store _Campaigns.js_ .

[[ex_campaign-js_store]]
.The store Campaigns.js
====
[source, javascript]
----
Ext.define('SSC.store.Campaigns', {
    extend: 'Ext.data.Store',

    config: {
        fields: [
            { name: 'title',       type: 'string' },
            { name: 'description', type: 'string' },
            { name: 'location',    type: 'string' }
        ],

        data: [
            {
                title: 'Mothers of Asthmatics',
                description: 'Mothers of Asthmatics - nationwide Asthma network',
                location: 'Chicago, IL'
            },
            {
                title: 'Lawyers for Children',
                description: 'Lawyers offering free services for the children',
                location: 'New York, NY'
            },
            {
                title: 'Sed tincidunt magna',
                description: 'Donec ac ligula sit amet libero vehicula laoreet',
                location: 'Dallas, TX'
            },
            {
                title: 'Friends of Blind Kids',
                description: 'Semi-annual charity events for blind kids',
                location: 'Miami, FL'
            },
            {
                title: 'Place Called Home',
                description: 'Adoption of the children',
                location: 'Fargo, ND'
            }
        ]
    }

});
----
====

==== Working with Landscape Mode

Handling landscape mode with Sencha Touch is done differently depending on how you deploy your application.(((landscape mode)))(((Sencha Touch framework, application programming, landscape mode))) If you decide to http://docs.sencha.com/cmd/3.1.2/#!/guide/native_packaging[package this app as a native one], landscape mode will be supported. Sencha CMD will generate the file _packager.json_, which will include a section dealing with orientation:

[source, javascript]
----
    "orientations": [
        "portrait",
        "landscapeLeft",
        "landscapeRight",
        "portraitUpsideDown"
    ]
----

If you're not planning to package your app as a native one, you'll need to do some manual coding by processing the `orientationchange` event.(((orientationchange event))) For example: 

[source, javascript]
----
Ext.Viewport.on('orientationchange', function() {
   // write the code to handle the landscape code here
});
----

This concludes the review of the Sencha Touch version of our sample application, which consists of six nice-looking screens. The amount of manual coding to achieve this is minimal. In the real world, you'd need to add business logic to this application, which comes down to inserting the JavaScript code into well-structured layers. The code to communicate with the server goes to the stores, the data is placed in the models, the UI remains in the views, and the main glue of your application is controllers. Sencha Touch does a good job for us, wouldn't you agree?     


=== Comparing jQuery Mobile and Sencha Touch 

In <<jquery_mobile>> and this chapter, you've learned about two different ways of developing a mobile application. So, what's better, jQuery Mobile or Sencha Touch? There is no correct answer to this question, and you will have to make a decision on your own. But here's a quick summary of pros and cons for each library or framework.(((jQuery Mobile, vs. Sencha Touch)))(((Sencha Touch framework, vs. jQuery Mobile)))

Use jQuery Mobile if the following are true:

* You are afraid of being locked into any one vendor. The effort to replace jQuery Mobile in your application with another framework (if you decide to do so) is a magnitude lower than switching from Sencha Touch to something else. 

* You need your application to work on most mobile platforms.

* You prefer declarative UI and hate debugging JavaScript.

Use Sencha Touch if the following are true:

* You like to have a rich library of precreated UIs.

* Your application needs smooth animation. Sencha Touch performs automatic throttling based on the actual frames-per-second supported on the device.

* Splitting the application code into cleanly defined architectural layers (model-view-controller-service) is important.

* You believe that using code generators adds value to your project.

* You want to be able to customize and extend components to fit your application's needs perfectly. Yes, you'll be writing JavaScript, but it still may be simpler than trying to figure out the enhancements done to an HTML component by jQuery Mobile under the hood. 

* You want to minimize the effort required to package your application as a native one.

* You want your application to look as close to the native ones as possible.

* You prefer to use software that is covered by the commercial support offered by a vendor.

While considering support options, do not just assume that paid support translates into better quality. This is not to say that Sencha won't offer you quality support, but in many cases, having a large community of developers will lead to a faster solution to a problem than dealing with one assigned support engineer. Having said this, we'd like you to know that the http://www.sencha.com/forum/[Sencha forum] has about half a million registered users who are actively discussing problems and offering solutions to one another.

Even if you are a developer's manager, you don't have to make the framework choice on your own. Bring your team into a conference room, order pizza, and listen to what _your team members_ have to say about these two frameworks or any other, being considered. We have offered you information about two of many frameworks, but the final call is yours.
